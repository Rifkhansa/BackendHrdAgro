// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations.Schema;
using System.Reflection.Metadata;
using BackendHrdAgro.Models.Database.MySql.Master;
using BackendHrdAgro.Models.Database.MySql.Support;
using BackendHrdAgro.Models.Employee;
using BackendHrdAgro.Models.Master;
using Microsoft.CodeAnalysis;
using Microsoft.EntityFrameworkCore;
using Pomelo.EntityFrameworkCore.MySql.Scaffolding.Internal;

namespace BackendHrdAgro.Models.Database.MySql;

[Keyless]
public class GetLatestId
{
    [Column("max_id")]
    public string? MaxId { get; set; } = "0000";
}

public partial class DatabaseContext : DbContext
{
    public DatabaseContext()
    {
    }

    public DatabaseContext(DbContextOptions<DatabaseContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BjbTmBank> BjbTmBanks { get; set; }

    public virtual DbSet<BjbTmClaimDocument> BjbTmClaimDocuments { get; set; }

    public virtual DbSet<BjbTmClaimGeneralDocument> BjbTmClaimGeneralDocuments { get; set; }

    public virtual DbSet<BjbTmClaimRisk> BjbTmClaimRisks { get; set; }

    public virtual DbSet<BjbTmClaimType> BjbTmClaimTypes { get; set; }

    public virtual DbSet<BjbTmInsurance> BjbTmInsurances { get; set; }

    public virtual DbSet<BjbTmPeriode> BjbTmPeriodes { get; set; }

    public virtual DbSet<BjbTmProduct> BjbTmProducts { get; set; }

    public virtual DbSet<BjbTmRangeTime> BjbTmRangeTimes { get; set; }

    public virtual DbSet<BjbTpClaim> BjbTpClaims { get; set; }

    public virtual DbSet<BjbTpClaimDocument> BjbTpClaimDocuments { get; set; }

    public virtual DbSet<BjbTpClaimDocumentAdditional> BjbTpClaimDocumentAdditionals { get; set; }

    public virtual DbSet<BjbTpTransaction> BjbTpTransactions { get; set; }

    public virtual DbSet<LoginSession> LoginSessions { get; set; }

    public virtual DbSet<OtpLog> OtpLogs { get; set; }

    public virtual DbSet<TmApplication> TmApplications { get; set; }

    public virtual DbSet<TmBank> TmBanks { get; set; }

    public virtual DbSet<TmCob> TmCobs { get; set; }

    public virtual DbSet<TmDay> TmDays { get; set; }

    public virtual DbSet<TmDepartment> TmDepartments { get; set; }

    public virtual DbSet<TmDivisionHead> TmDivisionHeads { get; set; }

    public virtual DbSet<TmEmployeeAffair> TmEmployeeAffairs { get; set; }

    public virtual DbSet<TmEmployeeAffairDocument> TmEmployeeAffairDocuments { get; set; }

    public virtual DbSet<TmEmployeeAffairGeneralDocument> TmEmployeeAffairGeneralDocuments { get; set; }

    public virtual DbSet<TmEmployeeBackup> TmEmployeeBackups { get; set; }

    public virtual DbSet<TmEmployeeStatus> TmEmployeeStatuses { get; set; }

    public virtual DbSet<TmHolidayDate> TmHolidayDates { get; set; }

    public virtual DbSet<TmHubungan> TmHubungans { get; set; }

    public virtual DbSet<TmInisialCuti> TmInisialCutis { get; set; }

    public virtual DbSet<TmInisialCuti2017> TmInisialCuti2017s { get; set; }

    public virtual DbSet<TmInventory> TmInventories { get; set; }

    public virtual DbSet<TmLetterForm> TmLetterForms { get; set; }

    public virtual DbSet<TmLetterType> TmLetterTypes { get; set; }

    public virtual DbSet<TmLevel> TmLevels { get; set; }

    public virtual DbSet<TmMarried> TmMarrieds { get; set; }

    public virtual DbSet<TmMenu> TmMenus { get; set; }

    public virtual DbSet<TmProblemCategory> TmProblemCategories { get; set; }

    public virtual DbSet<TmReason> TmReasons { get; set; }

    public virtual DbSet<TmReimbursment> TmReimbursments { get; set; }

    public virtual DbSet<TmReligi> TmReligis { get; set; }

    public virtual DbSet<TmRequest> TmRequests { get; set; }

    public virtual DbSet<TmRole> TmRoles { get; set; }

    public virtual DbSet<TmSecurity> TmSecurities { get; set; }

    public virtual DbSet<TmSex> TmSexes { get; set; }

    public virtual DbSet<TmSisaCuti> TmSisaCutis { get; set; }

    public virtual DbSet<TmSisaCuti2017> TmSisaCuti2017s { get; set; }

    public virtual DbSet<TmStudi> TmStudis { get; set; }

    public virtual DbSet<TmThirdParty> TmThirdParties { get; set; }

    public virtual DbSet<TmTitle> TmTitles { get; set; }

    public virtual DbSet<TmType> TmTypes { get; set; }

    public virtual DbSet<TmTypeCuti> TmTypeCutis { get; set; }

    public virtual DbSet<TmTypeIn> TmTypeIns { get; set; }

    public virtual DbSet<TmUser> TmUsers { get; set; }

    public virtual DbSet<TmUserGroup> TmUserGroups { get; set; }

    public virtual DbSet<TpAbsent> TpAbsents { get; set; }

    public virtual DbSet<TpAbsent2> TpAbsent2s { get; set; }

    public virtual DbSet<TpAbsentFoto> TpAbsentFotos { get; set; }

    public virtual DbSet<TpAbsentOld> TpAbsentOlds { get; set; }

    public virtual DbSet<TpAbsentRevisi> TpAbsentRevisis { get; set; }

    public virtual DbSet<TpAbsentee> TpAbsentees { get; set; }

    public virtual DbSet<TpAbsenteePeriode> TpAbsenteePeriodes { get; set; }

    public virtual DbSet<TpCuti> TpCutis { get; set; }

    public virtual DbSet<TpCutiCalculate> TpCutiCalculates { get; set; }

    public virtual DbSet<TpDatainventory> TpDatainventories { get; set; }

    public virtual DbSet<TpDetailCuti> TpDetailCutis { get; set; }

    public virtual DbSet<TpEmployeeAffairDocument> TpEmployeeAffairDocuments { get; set; }

    public virtual DbSet<TpEmployeeFamily> TpEmployeeFamilies { get; set; }

    public virtual DbSet<TpEmployeeLicense> TpEmployeeLicenses { get; set; }

    public virtual DbSet<TpEmployeeRelation> TpEmployeeRelations { get; set; }

    public virtual DbSet<TpEmployeeStudi> TpEmployeeStudis { get; set; }

    public virtual DbSet<TpExtend> TpExtends { get; set; }

    public virtual DbSet<TpFrqItService> TpFrqItServices { get; set; }

    public virtual DbSet<TpFrqItServiceTask> TpFrqItServiceTasks { get; set; }

    public virtual DbSet<TpHistoryChangePassword> TpHistoryChangePasswords { get; set; }

    public virtual DbSet<TpIncomingLetter> TpIncomingLetters { get; set; }

    public virtual DbSet<TpMutasi> TpMutasis { get; set; }

    public virtual DbSet<TpNotificationTopic> TpNotificationTopics { get; set; }

    public virtual DbSet<TpNotificationTraffic> TpNotificationTraffics { get; set; }

    public virtual DbSet<TpOutgoingLetter> TpOutgoingLetters { get; set; }

    public virtual DbSet<TpReimbursment> TpReimbursments { get; set; }

    public virtual DbSet<TpRequest> TpRequests { get; set; }

    public virtual DbSet<TpRoleMenu> TpRoleMenus { get; set; }

    public virtual DbSet<TpTermination> TpTerminations { get; set; }

    public virtual DbSet<TpUploadFileName> TpUploadFileNames { get; set; }

    public virtual DbSet<TpUserLocId> TpUserLocIds { get; set; }

    public virtual DbSet<TpUserRole> TpUserRoles { get; set; }

    //Penambahan 
    public virtual DbSet<GetLatestId> GetLatestIds { get; set; } = null!;
    public virtual DbSet<FindSessionDataQuery> FindSessionDataQueries { get; set; } = null!;
    public virtual DbSet<EmployeeGroupQuery> EmployeeGroups { get; set; } = null!;
    public virtual DbSet<Departments> Departments { get; set; } = null!;
    public virtual DbSet<Types> Types { get; set; } = null!;
    public virtual DbSet<Religions> Religions { get; set; } = null!;
    public virtual DbSet<Marrieds> Marrieds { get; set; } = null!;
    public virtual DbSet<Genders> Genders { get; set; } = null!;
    public virtual DbSet<Titles> Titles { get; set; } = null!;
    public virtual DbSet<Levels> Levels { get; set; } = null!;
    public virtual DbSet<EmployeeStatus> EmployeeStatuses { get; set; } = null!;
    public virtual DbSet<BankStatus> BankStatuses { get; set; } = null!;
    public virtual DbSet<ReasonStatus> ReasonStatuses { get; set; } = null!;
    public virtual DbSet<listFamily> ListFamilies { get; set; } = null!;
    public virtual DbSet<Relationship> Relationships { get; set; } = null!;
    public virtual DbSet<EmployeeDepartment> EmployeeDepartments { get; set; } = null!;
    public virtual DbSet<listStudi> ListStudis { get; set; } = null!;
    public virtual DbSet<StudyId> StudyIds { get; set; } = null!;
    public virtual DbSet<InsuranceType> InsuranceTypes { get; set; } = null!;
    public virtual DbSet<listLicense> ListLicenses { get; set; } = null!;
    public virtual DbSet<License> Licenses { get; set; } = null!;
    public virtual DbSet<listRelation> ListRelations { get; set; } = null!;
    public virtual DbSet<ViewData> ViewData { get; set; } = null!;
    public virtual DbSet<viewLicense> ViewLicense { get; set; } = null!;
    public virtual DbSet<viewRelation> ViewRelations { get; set; } = null!;
    public virtual DbSet<Documents> Documents { get; set; } = null!;
    public virtual DbSet<getEdit> GetEdits { get; set; } = null!;
    public virtual DbSet<ListDocument> ListDocuments { get; set; } = null!;
    public virtual DbSet<TerminationGroupQuery> TerminationGroupQueries { get; set; } = null!;
    public virtual DbSet<ExtendGroupQuery> ExtendGroupQueries { get; set; } = null!;
    public virtual DbSet<ExtendLastGroupQuery> ExtendLastGroupQueries { get; set; } = null!;
    public virtual DbSet<Reminders> Reminders { get; set; } = null!;
    public virtual DbSet<MutationGroup> MutationGroups { get; set; } = null!;
    //END

    //dashboard index
    public virtual DbSet<Dashboardpresence> Dashboardpresences { get; set; } = null!;
    //public virtual DbSet<EmployeeReport> EmployeeReports { get; set; } = null!;
    //End

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
    {
        if (!optionsBuilder.IsConfigured)
        {
            IConfigurationRoot configuration = new ConfigurationBuilder()
            .SetBasePath(Directory.GetCurrentDirectory())
            .AddJsonFile("appsettings.json").Build();
            optionsBuilder.UseMySql(
               connectionString:
               configuration.GetConnectionString("MySql"),
               serverVersion: ServerVersion.AutoDetect(configuration.GetConnectionString("MySql")),
               x => x.EnableRetryOnFailure(
                   maxRetryCount: 5,
                   maxRetryDelay: System.TimeSpan.FromSeconds(60),
                   errorNumbersToAdd: null))
               .EnableSensitiveDataLogging();
        }
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<BjbTmBank>(entity =>
        {
            entity.HasKey(e => e.BankId).HasName("PRIMARY");
        });

        modelBuilder.Entity<BjbTmClaimDocument>(entity =>
        {
            entity.HasKey(e => e.DocumentId).HasName("PRIMARY");

            entity.Property(e => e.DocumentId).ValueGeneratedNever();
            entity.Property(e => e.ClaimTypeId).HasDefaultValueSql("''");
            entity.Property(e => e.Document).HasDefaultValueSql("''");
            entity.Property(e => e.IsRequired).HasDefaultValueSql("'0'");
        });

        modelBuilder.Entity<BjbTmClaimGeneralDocument>(entity =>
        {
            entity.HasKey(e => e.DocumentId).HasName("PRIMARY");

            entity.Property(e => e.DocumentId).ValueGeneratedNever();
            entity.Property(e => e.DocumentName).HasDefaultValueSql("''");
            entity.Property(e => e.IsRequired).HasDefaultValueSql("'0'");
        });

        modelBuilder.Entity<BjbTmClaimRisk>(entity =>
        {
            entity.HasKey(e => e.RiskId).HasName("PRIMARY");

            entity.Property(e => e.RiskId).ValueGeneratedNever();
        });

        modelBuilder.Entity<BjbTmClaimType>(entity =>
        {
            entity.HasKey(e => e.ClaimTypeId).HasName("PRIMARY");

            entity.Property(e => e.ClaimType).HasDefaultValueSql("''");
            entity.Property(e => e.ProductId).HasDefaultValueSql("''");
        });

        modelBuilder.Entity<BjbTmInsurance>(entity =>
        {
            entity.HasKey(e => e.InsuranceId).HasName("PRIMARY");
        });

        modelBuilder.Entity<BjbTmPeriode>(entity =>
        {
            entity.HasKey(e => e.PeriodeId).HasName("PRIMARY");
        });

        modelBuilder.Entity<BjbTmProduct>(entity =>
        {
            entity.HasKey(e => e.ProductId).HasName("PRIMARY");
        });

        modelBuilder.Entity<BjbTmRangeTime>(entity =>
        {
            entity.HasKey(e => e.RangeTimeId).HasName("PRIMARY");
        });

        modelBuilder.Entity<BjbTpClaim>(entity =>
        {
            entity.HasKey(e => e.ClaimId).HasName("PRIMARY");

            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasComment("1=menunggu verifikator; 5= menuggu aproval; 10: menunggu pembayaran;25=sudah dibayar;55=pending Verifikasi;-2=reject from verifikator; -1= reject");
        });

        modelBuilder.Entity<BjbTpClaimDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.ClaimTypeId)
                .HasDefaultValueSql("'0'")
                .HasComment("CT000 artinya dokumen umum");
            entity.Property(e => e.DocumentStatus).HasComment("0, tidak ada1, ada");
        });

        modelBuilder.Entity<BjbTpClaimDocumentAdditional>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.Id).ValueGeneratedNever();
            entity.Property(e => e.IsDeleted).HasDefaultValueSql("'0'");
        });

        modelBuilder.Entity<BjbTpTransaction>(entity =>
        {
            entity.HasKey(e => e.TransactionId).HasName("PRIMARY");
        });

        modelBuilder.Entity<OtpLog>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.Status).HasDefaultValueSql("'Pending'");
        });

        modelBuilder.Entity<TmApplication>(entity =>
        {
            entity.HasKey(e => e.ApplicationId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmBank>(entity =>
        {
            entity.HasKey(e => e.BankId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmCob>(entity =>
        {
            entity.HasKey(e => e.CobId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmDay>(entity =>
        {
            entity.HasKey(e => e.D).HasName("PRIMARY");

            entity.Property(e => e.D).ValueGeneratedNever();
        });

        modelBuilder.Entity<TmDepartment>(entity =>
        {
            entity.HasKey(e => e.DepartmentId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmDivisionHead>(entity =>
        {
            entity.HasKey(e => e.DivId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmEmployeeAffair>(entity =>
        {
            entity.HasKey(e => e.EmployeeId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmEmployeeAffairDocument>(entity =>
        {
            entity.HasKey(e => e.DocumentId).HasName("PRIMARY");

            entity.Property(e => e.DocumentId).ValueGeneratedNever();
            entity.Property(e => e.ClaimTypeId).HasDefaultValueSql("''");
            entity.Property(e => e.Document).HasDefaultValueSql("''");
            entity.Property(e => e.IsRequired).HasDefaultValueSql("'0'");
        });

        modelBuilder.Entity<TmEmployeeAffairGeneralDocument>(entity =>
        {
            entity.HasKey(e => e.DocumentId).HasName("PRIMARY");

            entity.Property(e => e.DocumentName).HasDefaultValueSql("''");
            entity.Property(e => e.IsRequired).HasDefaultValueSql("'0'");
        });

        modelBuilder.Entity<TmEmployeeBackup>(entity =>
        {
            entity.HasKey(e => e.EmployeeId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmEmployeeStatus>(entity =>
        {
            entity.HasKey(e => e.EmployeeStatusId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmHolidayDate>(entity =>
        {
            entity.HasKey(e => e.HolidayId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmHubungan>(entity =>
        {
            entity.HasKey(e => e.HubunganId).HasName("PRIMARY");

            entity.Property(e => e.IsFamily).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<TmInisialCuti>(entity =>
        {
            entity.HasKey(e => e.InisialCutiId).HasName("PRIMARY");

            entity.Property(e => e.StatusCuti).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<TmInisialCuti2017>(entity =>
        {
            entity.HasKey(e => e.InisialCutiId).HasName("PRIMARY");

            entity.Property(e => e.StatusCuti).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<TmInventory>(entity =>
        {
            entity.HasKey(e => e.InventoryId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmLetterForm>(entity =>
        {
            entity.HasKey(e => e.LetterFormId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmLetterType>(entity =>
        {
            entity.HasKey(e => e.LetterTypeId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmLevel>(entity =>
        {
            entity.HasKey(e => e.LevelId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmMarried>(entity =>
        {
            entity.HasKey(e => e.MarriedId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmMenu>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmProblemCategory>(entity =>
        {
            entity.HasKey(e => e.ProblemId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmReason>(entity =>
        {
            entity.HasKey(e => e.ReasonId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmReimbursment>(entity =>
        {
            entity.HasKey(e => e.EmployeeId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmReligi>(entity =>
        {
            entity.HasKey(e => e.ReligiId).HasName("PRIMARY");

            entity.Property(e => e.ReligiId).ValueGeneratedNever();
        });

        modelBuilder.Entity<TmRequest>(entity =>
        {
            entity.HasKey(e => e.RequestTypeId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmSecurity>(entity =>
        {
            entity.HasKey(e => e.SecurityId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmSex>(entity =>
        {
            entity.HasKey(e => e.GenderId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmSisaCuti>(entity =>
        {
            entity.HasKey(e => e.InisialCutiId).HasName("PRIMARY");

            entity.Property(e => e.StatusCuti).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<TmSisaCuti2017>(entity =>
        {
            entity.HasKey(e => e.InisialCutiId).HasName("PRIMARY");

            entity.Property(e => e.StatusCuti).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<TmStudi>(entity =>
        {
            entity.HasKey(e => e.StudiId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmThirdParty>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmTitle>(entity =>
        {
            entity.HasKey(e => e.TitleId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmType>(entity =>
        {
            entity.HasKey(e => e.TypeId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmTypeCuti>(entity =>
        {
            entity.HasKey(e => e.TypeCutiId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmTypeIn>(entity =>
        {
            entity.HasKey(e => e.TypeInsId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmUser>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TmUserGroup>(entity =>
        {
            entity.HasKey(e => e.GroupId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TpAbsentRevisi>(entity =>
        {
            entity.Property(e => e.Status).HasComment("1=ready entry, -1 =reject; 5=adknowledge; 9=clear;");
        });

        modelBuilder.Entity<TpAbsentee>(entity =>
        {
            entity.Property(e => e.CutAbsenteeType)
                .HasDefaultValueSql("'0'")
                .IsFixedLength()
                .HasComment("N: tidak ada potongan; W: terlambat menit ke 14; C: terlambat 15 menit ke atas atau potong cuti 1/4; A:tidak masuk; I: izin");
            entity.Property(e => e.In).HasDefaultValueSql("'n'");
            entity.Property(e => e.IsApproveComplain)
                .HasDefaultValueSql("'0'")
                .HasComment("0: belum ada complain; 99:ada, perlu approval; -1 : reject; 1: approve");
            entity.Property(e => e.IsApproveOvertime)
                .HasDefaultValueSql("'0'")
                .HasComment("0: belum ada alasan; 99:ada, perlu approval; -1 : reject; 1: approve");
            entity.Property(e => e.IsOvertime).HasComment("0: tidak ada overtime; 1: overtime; ");
            entity.Property(e => e.Out).HasDefaultValueSql("'n'");
        });

        modelBuilder.Entity<TpAbsenteePeriode>(entity =>
        {
            entity.Property(e => e.Month).IsFixedLength();
            entity.Property(e => e.Status)
                .HasDefaultValueSql("'1'")
                .HasComment("1: available; 99: closing");
            entity.Property(e => e.Year).IsFixedLength();
        });

        modelBuilder.Entity<TpCuti>(entity =>
        {
            entity.HasKey(e => e.CutiId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TpEmployeeAffairDocument>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");

            entity.Property(e => e.ClaimTypeId)
                .HasDefaultValueSql("'0'")
                .HasComment("CT000 artinya dokumen umum");
            entity.Property(e => e.DocumentStatus).HasComment("0, tidak ada1, ada");
        });

        modelBuilder.Entity<TpFrqItService>(entity =>
        {
            entity.Property(e => e.Status).HasComment("-1=reject;0=delete;1=done;100=need approval");
        });

        modelBuilder.Entity<TpIncomingLetter>(entity =>
        {
            entity.Property(e => e.DestinationId).HasDefaultValueSql("''");
            entity.Property(e => e.Status).HasDefaultValueSql("'1'");
        });

        modelBuilder.Entity<TpNotificationTopic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<TpNotificationTraffic>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<TpOutgoingLetter>(entity =>
        {
            entity.HasKey(e => e.LetterId).HasName("PRIMARY");

            entity.Property(e => e.Checking).HasDefaultValueSql("'1'");
            entity.Property(e => e.SignatureBy).HasComment("title_id");
            entity.Property(e => e.Status).HasDefaultValueSql("'1'");
            entity.Property(e => e.UserSender).HasComment("pengantar");
        });

        modelBuilder.Entity<TpRequest>(entity =>
        {
            entity.HasKey(e => e.RequestId).HasName("PRIMARY");
        });

        modelBuilder.Entity<TpUserLocId>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<TpUserRole>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}